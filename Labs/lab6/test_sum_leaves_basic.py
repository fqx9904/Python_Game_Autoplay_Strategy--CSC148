import unittest
import random
from hypothesis import given
from hypothesis import note
from hypothesis.strategies import integers
from hypothesis.strategies import lists
from hypothesis.strategies import recursive
from ex6 import sum_leaves


def make_children_list(children):
    """
    Return a list of child Trees generated by children.

    @param list[object]|object children: The children values and trees
    @rtype: (list[Tree], int)
    """
    leaves_sum = 0
    if type(children) != list:
        return [[Tree(children)], children]

    ret_children = []
    for child in children:
        if type(child) == list:
            rec_call = make_children_list(child)
            value = random.randint(0, 100)
            ret_children.append(Tree(value, rec_call[0]))

            if not rec_call[0]:
                leaves_sum += value

            leaves_sum += rec_call[1]
        else:
            rec_call = make_children_list(child)
            ret_children += rec_call[0]
            leaves_sum += rec_call[1]

    # Pick a random value for the Tree's value
    return (ret_children, leaves_sum)

class Tree:
    """
    A bare-bones Tree ADT that identifies the root with the entire tree.
    """
    def __init__(self, value=None, children=None):
        """
        Create Tree self with content value and 0 or more children

        @param Tree self: this tree
        @param object value: value contained in this tree
        @param list[object|None] children: possibly-empty list of children
        @rtype: None
        """
        self.value = value
        # copy children if not None
        self.children = children.copy() if children else []

    def __repr__(self):
        """
        Return representation of Tree (self) as string that
        can be evaluated into an equivalent Tree.

        @param Tree self: this tree
        @rtype: str

        >>> t1 = Tree(5)
        >>> t1
        Tree(5)
        >>> t2 = Tree(7, [t1])
        >>> t2
        Tree(7, [Tree(5)])
        """
        # Our __repr__ is recursive, because it can also be called
        # via repr...!
        return ('Tree({}, {})'.format(repr(self.value), repr(self.children))
                if self.children
                else 'Tree({})'.format(repr(self.value)))

class CountInternalTests(unittest.TestCase):
    def test_returns_int(self):
        """
        Test sum_leaves to make sure it returns an int.
        """
        return_type = type(sum_leaves(Tree(0, [Tree(1, [Tree(2)])])))
        self.assertEqual(return_type, int, "sum_leaves should return type" +
                         "int, but instead returned type {}.".format(return_type
                                                                     ))

    def test_leaf_node(self):
        """
        Test sum_leaves on a leaf node.
        """
        self.assertEqual(sum_leaves(Tree(1)), 1, "Leaf nodes should " +
                         "return their value.")

    def test_one_leaf_child(self):
        """
        Test sum_leaves on a tree containing only a root and its leaf child.
        """
        t = Tree(1, [Tree(2)])

        self.assertEqual(sum_leaves(t), 2, "Internal nodes should not be " +
                         "included in the sum, while leaf nodes (with no " +
                         "children) should.")

    def test_multiple_leaf_children(self):
        """
        Test sum_leaves on a tree containing only a root and its children
        which are all leaves.
        """
        t = Tree(1, [Tree(2), Tree(3)])

        self.assertEqual(sum_leaves(t), 5, "Internal nodes should not be " +
                         "included in the sum, while leaf nodes (with no " +
                         "children) should.")

    def test_multiple_non_leaf_children(self):
        """
        Test sum_leaves on a tree containing only a root and its children
        which are all subtrees with children.
        """
        t = Tree(1, [Tree(2, [Tree(4), Tree(6)]), Tree(3, [Tree(5), Tree(7)])])

        self.assertEqual(sum_leaves(t), 22, "All leaf nodes should be " +
                         "summed together.")

    @given(integers(min_value = -99, max_value = 99),
           recursive(integers(min_value = -99, max_value = 99), lists,
                     max_leaves = 20))
    def test_sum_leaves(self, value, children):
        """
        Test the correctness of sum_leaves against the solution.
        """
        (children_list, leaves_sum) = make_children_list(children)
        t = Tree(value, children_list)

        if not children_list:
            leaves_sum += value

        actual = sum_leaves(t)
        self.assertEqual(actual, leaves_sum,
                         ("sum_leaves on the Tree\n{}\nReturned {}" +
                          " instead of {}.").format(t.__repr__(), actual,
                                                    leaves_sum))

if __name__ == "__main__":
    unittest.main()
